head	1.5;
access;
symbols;
locks;
comment	@# @;


1.5
date	2016.01.18.04.39.24;	author -;	state -;
branches;
next	1.4;

1.4
date	2016.01.18.02.29.36;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.01.18.02.12.12;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.01.18.01.57.44;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.01.17.08.52.50;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@// $Id: jfmt.java,v 1.4 2016-01-17 18:29:36-08 - - $
//
// Starter code for the jfmt utility.  This program is similar
// to the example code jcat.java, which iterates over all of its
// input files, except that this program shows how to use
// String.split to extract non-whitespace sequences of characters
// from each line.
//

import java.io.*;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import static java.lang.System.*;

class jfmt {
   // Static variables keeping the general status of the program.
   public static final String JAR_NAME = get_jarname();
   public static final int EXIT_SUCCESS = 0;
   public static final int EXIT_FAILURE = 1;
   public static int exit_status = EXIT_SUCCESS;
   static int max = 65;
   static int min = 0;

   // A basename is the final component of a pathname.
   // If a java program is run from a jar, the classpath is the
   // pathname of the jar.
   static String get_jarname() {
      String jarpath = getProperty ("java.class.path");
      int lastslash = jarpath.lastIndexOf ('/');
      if (lastslash < 0) return jarpath;
      return jarpath.substring (lastslash + 1);
   }


   // Formats a single file.
   static void format (Scanner infile) {
        List<String> words = new LinkedList<String>();
        
      // Read each line from the opened file, one after the other.
      // Stop the loop at end of file.
      for (int linenr = 1; infile.hasNextLine(); ++linenr) {
         String line = infile.nextLine();

            if (line.length() == 0) {
                while (line.length() == 0) {
                line = infile.nextLine();
        }
    print_paragraph(words);
  }
         // Split the line into words around white space and iterate
         // over the words.
         for (String word: line.split ("\\s+")) {

            // Skip an empty word if such is found.
            if (word.length() == 0) continue;
            // Append the word to the end of the linked list.
            words.add (word);

         }
      }
        print_paragraph(words);
   }

   static void print_paragraph (List <String> words){
      for (String word: words) {
         if (min == 0) {
            out.printf("%s", word);
            min += word.length();
       } else {
            min += word.length();
    }
        if (min < max) {
            out.printf(" %s", word);
            min++;
       } else {
            out.printf("%n%s", word);
            min = word.length();
       }
    }
    out.printf("%n%n");
    min = 0;
    words.clear();
  }
    

   // Main function scans arguments and opens/closes files.
   public static void main (String[] args) {
      if (args.length < 1) {
         // There are no filenames given on the command line.
         out.printf ("FILE: -%n");
         format (new Scanner (in));
      }else {
         // Iterate over each filename given on the command line.
         for (int argix = 0; argix < args.length; ++argix) {
            String filename = args[argix];

            if (filename.startsWith("-")) {
                max = Integer.parseInt(filename.substring(1));
            }
            if (filename.equals ("-")) {
               // Treat a filename of "-" to mean System.in.
               out.printf ("FILE: -%n");
               format (new Scanner (in));
            }else {
               // Open the file and read it, or error out.
               try {
                  Scanner infile = new Scanner (new File (filename));
                  out.printf ("FILE: %s%n", filename);
                  format (infile);
                  infile.close();
               }catch (IOException error) {
                  exit_status = EXIT_FAILURE;
                  err.printf ("%s: %s%n", JAR_NAME,
                              error.getMessage());
               }
            }
         }
      }
      exit (exit_status);
   }

}
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.3 2016-01-17 18:12:12-08 - - $
d23 2
a24 2
   int max = 65;
   int min = 0;
a57 1
            out.printf ("...[%s]%n", word);
d66 1
a66 1
   public void print_paragraph (List words){
d90 1
a90 1
      if (args.length == 0) {
d98 4
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.2 2016-01-17 17:57:44-08 - - $
d40 1
a40 1

a44 1
         out.printf ("line %3d: [%s]%n", linenr, line);
d46 6
a62 5
         out.printf ("list:");

         // Use iterator syntax to print out all of the words.
         for (String word: words) out.printf (" %s", word);
         out.printf ("%n");
d64 1
d68 1
a68 1
      for (String word: words){
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.1 2016-01-17 00:52:50-08 - - $
d39 1
a39 1
        List<String> words = New List<String>();
d73 13
a85 2

        if (m         
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.1 2015-12-11 17:02:48-08 - - $
d23 2
d39 2
a46 3
         // Create a LinkedList of Strings.
         List<String> words = new LinkedList<String>();

d66 10
@
