head	1.4;
access;
symbols;
locks;
comment	@# @;


1.4
date	2016.02.17.00.39.01;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.02.17.00.35.26;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.02.02.07.20.21;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.02.02.01.00.04;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@// $Id: jxref.java,v 1.3 2016-02-16 16:35:26-08 - - $

import java.io.*;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static java.lang.System.*;

class jxref {
   private static final String STDIN_FILENAME = "-";
   private static final String REGEX = "\\w+([-'.:/]\\w+)*";
   private static final Pattern PATTERN = Pattern.compile(REGEX);

   private static void xref_file (String filename, Scanner file){
     // misc.trace ("filename", filename);
      listmap map = new listmap();
      for (int linenr = 1; file.hasNextLine(); ++linenr) {
         String line = file.nextLine();
        // misc.trace (filename, linenr, line);
         Matcher match = PATTERN.matcher (line);
         while (match.find()) {
            String word = match.group();
            map.insert(word, linenr);
         }
      }
          out.printf("::::::::::::::::::::::::::::::::");
          out.printf("%n%s%n", filename);
          out.printf("::::::::::::::::::::::::::::::::");  
          out.printf("%n"); 
      for (Entry<String, intqueue> entry: map) {
           int count = entry.getValue().getcount();
           out.printf("%s [%d]", entry.getKey(),count);
           for (Iterator<Integer> lineItr = entry.getValue().iterator();
               lineItr.hasNext();) {
               out.printf(" %d", lineItr.next());
           }
           out.printf("%n");
        // misc.trace ("STUB", entry,
        // entry.getKey(), entry.getValue());
         //FIXME
         
      }
   }

 
   // For each filename, open the file, cross reference it,
   // and print.
   private static void xref_filename (String filename) {
      if (filename.equals (STDIN_FILENAME)) {
         xref_file (filename, new Scanner (System.in));
      }else {
         try {
            Scanner file = new Scanner (new File (filename));
            xref_file (filename, file);
            file.close();
         }catch (IOException error) {
            misc.warn (error.getMessage());
         }
      }
   }

   // Main function scans arguments to cross reference files.
   public static void main (String[] args) {
      if (args.length == 0) {
         xref_filename (STDIN_FILENAME);
      }else {
         for (String filename: args) {
            xref_filename (filename);
         }
      }
      exit (misc.exit_status);
   }

}

@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.2 2016-02-01 23:20:21-08 - - $
d60 1
a60 1
          //  misc.warn (error.getMessage());
d74 1
a74 1
    //  exit (misc.exit_status);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.1 2016-02-01 17:00:04-08 - - $
d60 1
a60 1
            misc.warn (error.getMessage());
d74 1
a74 1
      exit (misc.exit_status);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.9 2016-01-12 17:37:33-08 - - $
d18 1
a18 1
      misc.trace ("filename", filename);
d22 1
a22 1
         misc.trace (filename, linenr, line);
@
