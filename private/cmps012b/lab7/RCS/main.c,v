head	1.2;
access;
symbols;
locks;
comment	@ * @;


1.2
date	2016.02.26.07.09.38;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.02.26.07.04.00;	author -;	state -;
branches;
next	;


desc
@@


1.2
log
@-
@
text
@// $Id: main.c,v 1.10 2013-02-15 17:17:42-08 - - $

#include <assert.h>
#include <errno.h>
#include <libgen.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "queue.h"

char *execname = NULL;
int exit_status = EXIT_SUCCESS;

void putinqueue (queue *the_queue, FILE *input, char *filename) {
   char buffer[1024];
   for (int linenr = 1; ; ++linenr) {
      char *linepos = fgets (buffer, sizeof buffer, input);
      if (linepos == NULL) break;
      linepos = strchr (buffer, '\n');
      if (linepos == NULL) {
         fflush (NULL);
         fprintf (stderr, "%s: %s[%d]: unterminated line\n",
                  execname, filename, linenr);
         fflush (NULL);
         exit_status = EXIT_FAILURE;
      }else {
         *linepos = '\0';
      }
      linepos = strdup (buffer);
      assert (linepos != NULL);
      insert_queue (the_queue, linepos);
   }
}

void putfileinqueue (queue *the_queue, char *filename) {
   FILE *input = fopen (filename, "r");
   if (input == NULL) {
      fflush (NULL);
      fprintf (stderr, "%s: %s: %s\n",
               execname, filename, strerror (errno));
      fflush (NULL);
      exit_status = EXIT_FAILURE;
   }else {
      putinqueue (the_queue, input, filename);
      fclose (input);
   }
}


int main (int argc, char **argv) {
   execname = basename (argv[0]);
   queue *the_queue = new_queue();

   if (argc < 2) {
      putinqueue (the_queue, stdin, "-");
   }else {
      for (int argi = 1; argi < argc; ++argi) {
         if (strcmp (argv[argi], "-") == 0) {
            putinqueue (the_queue, stdin, "-");
         }else {
            putfileinqueue (the_queue, argv[argi]);
         }
      }
   }

   while (! isempty_queue (the_queue)) {
      printf ("%s\n", remove_queue (the_queue));
   }

   return exit_status;
}

@


1.1
log
@-
@
text
@d1 1
a1 7
// $Id: main.c,v 1.12 2014-02-27 17:46:38-08 - - $

//
// Silly main program which just creates an cbox box, puts a
// number in it, gets it back out, and deletes the box.
// Run with bcheck to verify no memory leaks.
//
d3 1
d10 1
a10 1
#include "cbox.h"
d13 36
d50 1
a51 1
   (void) argc; // warning: unused parameter 'argc'
d53 1
d55 15
a69 10
   // Declare the box and initialize it.
   cbox *box = new_cbox();
   printf ("box = %p\n", box);

   // Perform a couple of operations on it.
   put_cbox (box, 1024);
   printf ("box value is %d\n", get_cbox (box));

   // Free up the box.
   free_cbox (box);
d71 1
a71 1
   return EXIT_SUCCESS;
@
