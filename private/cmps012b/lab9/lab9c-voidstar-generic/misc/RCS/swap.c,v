head	1.9;
access;
symbols;
locks;
comment	@ * @;


1.9
date	2014.02.21.23.43.41;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.10.18.19.00.51;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.10.18.19.00.17;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.10.18.18.58.51;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.10.18.18.56.31;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.10.18.18.56.14;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.05.30.22.57.39;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.05.30.22.57.25;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.05.30.22.34.05;	author -;	state -;
branches;
next	;


desc
@@


1.9
log
@-
@
text
@// $Id: swap.c,v 1.8 2013-10-18 12:00:51-07 - - $

//
// Example of a swap function to exchange two
// areas of memory.
//

#include <alloca.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

// Swap using a malloc'd temp storage, later free'd.
void swapm (void *this, void *that, size_t size) {
   printf ("%s (%p, %p, %ld)\n", __func__, this, that, size);
   void *temp = malloc (size);
   printf ("%s: temp=%p\n", __func__, temp);
   memcpy (temp, this, size);
   memcpy (this, that, size);
   memcpy (that, temp, size);
   free (temp);
}

// Swap using alloca'd storage, which is on the stack,
// auto freed when the function returns.
void swapa (void *this, void *that, size_t size) {
   printf ("%s (%p, %p, %ld)\n", __func__, this, that, size);
   void *temp = alloca (size);
   printf ("%s: temp=%p\n", __func__, temp);
   memcpy (temp, this, size);
   memcpy (this, that, size);
   memcpy (that, temp, size);
}

int main (int argc, char **argv) {
   (void) argc; // warning: unused parameter 'argc'
   printf ("%s\n", *argv);
   double d1 = 3;
   double d2 = 6;
   printf ("d1 = %g, d2 = %g\n", d1, d2);
   swapm (&d1, &d2, sizeof (double));
   printf ("d1 = %g, d2 = %g\n", d1, d2);
   char s1[] = "Hello, World.";
   char s2[] = "This is a test of swapa.";
   printf ("s1 = \"%s\", s2 = \"%s\"\n", s1, s2);
   swapa (s1, s2, strlen (s1));
   printf ("s1 = \"%s\", s2 = \"%s\"\n", s1, s2);
   return 0;
}

//TEST// valgrind --leak-check=full swap </dev/null >swap.out 2>&1
//TEST// mkpspdf swap.ps swap.c* swap.out

@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: swap.c,v 1.7 2013-10-18 12:00:17-07 - - $
d36 2
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: swap.c,v 1.6 2013-10-18 11:58:51-07 - - $
d38 1
d43 1
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: swap.c,v 1.5 2013-10-18 11:56:31-07 - - $
d40 3
a42 3
   const char *s1 = "Hello, World.";
   const char *s2 = "This is a test of swapa.";
   swapa (s1, s2, sizeof s1);
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: swap.c,v 1.4 2013-10-18 11:56:14-07 - - $
d40 2
a41 2
   char s1[] = "Hello, World.";
   char s2[] = "This is a test of swapa.";
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: swap.c,v 1.3 2013-05-30 15:57:39-07 - - $
d15 1
a15 1
   printf ("%s (%p, %p, %ld)\n", __FUNC__, this, that, size);
d17 1
a17 1
   printf ("%s: temp=%p\n", __FUNC__, temp);
d27 1
a27 1
   printf ("%s (%p, %p, %ld)\n", __FUNC__, this, that, size);
d29 1
a29 1
   printf ("%s: temp=%p\n", __FUNC__, temp);
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: swap.c,v 1.2 2013-05-30 15:57:25-07 - - $
d15 1
d17 1
d27 1
d29 1
d46 4
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: swap.c,v 1.1 2013-05-30 15:34:05-07 - - $
d34 1
a34 1
   swapm (&d1, &d2, sizeof double);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d10 1
d40 1
@
